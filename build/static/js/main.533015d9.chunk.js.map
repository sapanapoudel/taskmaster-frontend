{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","class","React","Component","form","FormData","API","_handleChange","event","value","target","files","set","name","History","props","history","map","record","idx","key","date","action","Main","useState","tasks","setTasks","useEffect","fetch","then","data","json","fetchedTasks","task","href","id","title","src","pic","alt","onSubmit","e","preventDefault","method","mode","body","response","catch","error","console","log","_upload","encType","onChange","type","historyList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAiBeA,G,uLAbX,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,+BACf,yBAAKA,UAAU,gCACb,0BAAMA,UAAU,wBAAhB,eAEF,uBAAGC,MAAM,gBAAT,+B,GARaC,IAAMC,Y,OCCvBC,G,MAAO,IAAIC,UACTC,EAAM,uEAEZ,SAASC,EAAcC,GACrB,IAAIC,EAAQD,EAAME,OAAOC,MAAQH,EAAME,OAAOC,MAAM,GAAKH,EAAME,OAAOD,MACtEL,EAAKQ,IAAIJ,EAAME,OAAOG,KAAMJ,GA0D9B,SAASK,EAAQC,GACf,OACE,4BACGA,EAAMC,QAAQC,KAAI,SAACC,EAAQC,GAC1B,OACE,wBAAIC,IAAKD,GACP,8BAAOD,EAAOG,MACd,8BAAOH,EAAOI,aAQXC,MApEf,WAAiB,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,KAwBd,OAFAC,qBAnBA,WACEC,MAAMtB,GACLuB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAM,SAAAG,GAAY,OAAIN,EAASM,QAgBb,IAGnB,yBAAKhC,UAAU,mBACb,yBAAKA,UAAU,cACZyB,EAAMR,KAAI,SAACgB,EAAMd,GAChB,OACE,uBAAGe,KAAK,IAAIlC,UAAU,yCAAyCoB,IAAKa,EAAKE,IACvE,iCACE,yCACO,8BAAOF,EAAKG,MAAZ,KAA0B,6BAE/B,yBAAKC,IAAKJ,EAAKK,IAAKC,IAAI,UACxB,0BAAMC,SAAW,SAACC,GAAD,OA1BvB,SAAiBjC,EAAOyB,GACtBzB,EAAMkC,iBACNd,MAAM,GAAD,OAAItB,EAAJ,YAAW2B,EAAKE,GAAhB,WAA6B,CAChCQ,OAAQ,OACRC,KAAM,UACNC,KAAMzC,IAEPyB,MAAM,SAAAiB,GAAQ,OAAIA,EAASf,UAC3BgB,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,MACvCnB,MAAK,SAAAiB,GAAQ,OAAIG,QAAQC,IAAI,WAAYJ,MAiBdK,CAAQV,EAAGR,IAAOX,OAAQhB,EAAI,IAAD,OAAK2B,EAAKE,GAAV,WAAuBQ,OAAO,OAAOS,QAAQ,uBAChG,+BACE,8CACA,2BAAOC,SAAU9C,EAAeM,KAAM,OAAOyC,KAAO,UAEtD,2CAVN,YAaW,kBAACxC,EAAD,CAASE,QAASiB,EAAKsB,sBCvCjCC,E,iLAVX,OACE,yBAAKvD,MAAM,mBACX,kBAAC,IAAMF,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANUG,IAAMC,WCOJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.533015d9.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"p-3 mb-2 bg-info text-white\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\">Taskmaster</span>\n        </nav>\n        <p class=\"text-justify\">Make yourself useful!</p>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React, {useState, useEffect} from 'react';\nimport { format } from 'path';\n\nlet form = new FormData();\nconst API = 'http://taskmaster1-dev1.us-west-2.elasticbeanstalk.com/api1/v2/tasks';\n\nfunction _handleChange(event) {\n  let value = event.target.files ? event.target.files[0] : event.target.value;\n  form.set(event.target.name, value);\n\n}\n\n\nfunction Main() {\n  const[tasks, setTasks] = useState([]);\n  \n  function _getTasks(){\n    fetch(API)\n    .then(data => data.json())\n    .then (fetchedTasks => setTasks(fetchedTasks));\n  }\n  \n            function _upload(event, task) {\n              event.preventDefault();\n              fetch(`${API}/${task.id}/images`, {\n                method: \"POST\",\n                mode: 'no-cors',\n                body: form,\n              })\n              .then (response => response.json())\n              .catch(error => console.error('Error:', error))\n              .then(response => console.log('Success:', response));\n               \n            }\n\n  useEffect(_getTasks, []);\n\n  return (\n    <div className=\"container-fluid\"> \n      <div className=\"list-group\">\n        {tasks.map((task, idx) => {\n          return (\n            <a href=\"#\" className=\"list-group-item list-group-item-action\" key={task.id}>\n              <details>\n                <summary>\n                  Task:<span>{task.title} </span><br />\n                  {/* <span>{task.pic}</span> */}\n                  <img src={task.pic} alt=\"image\" />\n                  <form onSubmit={ (e) => _upload(e, task)} action={API+`/${task.id}/images`} method=\"post\" encType=\"multipart/form-data\">\n                    <label>\n                      <span>Upload image</span>\n                      <input onChange={_handleChange} name =\"file\" type = \"file\" />\n                    </label>\n                    <button> Save</button>\n                  </form>\n                </summary>\n                History: <History history={task.historyList}/>\n              </details>\n            </a>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nfunction History(props){\n  return (\n    <ol>\n      {props.history.map((record, idx) => {\n        return (\n          <li key={idx}>\n            <span>{record.date}</span>\n            <span>{record.action}</span>\n          </li>\n        )\n      })}\n    </ol>\n  )\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header.js';\nimport Main from './components/Main.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div class=\"container-fluid\">\n      <React.Fragment>\n        <Header />\n        <Main />\n      </React.Fragment>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}