{"version":3,"sources":["components/Header.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","className","class","React","Component","Main","form","FormData","useState","formData","setFormData","API","_handleChangeUpload","event","value","target","files","set","name","_handleChange","tasks","setTasks","useEffect","fetch","then","data","json","fetchedTasks","onSubmit","preventDefault","method","headers","mode","body","JSON","stringify","response","catch","error","console","log","onChange","placeholder","type","map","task","idx","href","key","id","title","picUrl","pic","src","alt","e","_upload","action","encType","History","history","historyList","props","record","date","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e926b290.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"p-3 mb-2 bg-info text-white\">\n        <nav className=\"navbar navbar-light bg-light\">\n          <span className=\"navbar-brand mb-0 h1\">Taskmaster</span>\n        </nav>\n        <p class=\"text-justify\">Make yourself useful!</p>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { format } from \"path\";\n\nfunction Main() {\n  let form = new FormData();\n\n  // For the JSON version of the form\n  const [formData, setFormData] = useState({});\n\n  const API =\n    \"https://lvf7rxafk8.execute-api.us-west-2.amazonaws.com/dev/tasks\";\n\n  function _handleChangeUpload(event) {\n    let value = event.target.files ? event.target.files[0] : event.target.value;\n    form.set(event.target.name, value);\n  }\n\n  function _handleChange(event) {\n    setFormData( {...formData, [event.target.name]:event.target.value});\n  }\n  const [tasks, setTasks] = useState([]);\n\n  function _getTasks() {\n    fetch(API)\n      .then(data => data.json())\n      .then(fetchedTasks => setTasks(fetchedTasks));\n  }\n\n  function _upload(event, task) {\n    event.preventDefault();\n    fetch(`${API}/${task.id}/images`, {\n      method: \"POST\",\n      mode: \"no-cors\",\n      body: form\n    })\n      .then(response => response.json())\n      .catch(error => console.error(\"Error:\", error))\n      .then(response => console.log(\"Success:\", response));\n  }\n\n  function _handleSubmit(event) {\n    event.preventDefault();\n    //fetch (`${API}/tasks`)\n    fetch(`${API}`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      mode: \"cors\",\n      body: JSON.stringify(formData)\n    })\n      .then(response => response.json())\n      .catch(error => console.error(\"Error:\", error))\n      .then(response => console.log(\"Success:\", response));\n  }\n\n  useEffect(_getTasks, []);\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"list-group\">\n      \n        <h4>Json Submit Form</h4>\n        <form onSubmit={_handleSubmit}>\n          <label>\n            <span>Title</span>\n            <input onChange={_handleChange} name=\"title\" placeholder=\"title\" />\n          </label>\n          <label>\n            <span>Description</span>\n            <input\n              onChange={_handleChange}\n              name=\"description\"\n              type=\"text\"\n              placeholder=\"description\"\n            />\n          </label>\n          <label>\n            <span>Assignee</span>\n            <input\n              onChange={_handleChange}\n              name=\"assignee\"\n              type=\"text\"\n              placeholder=\"assignee\"\n            />\n          </label>\n          <button>Save</button>\n        </form>\n        <br />\n        {tasks.map((task, idx) => {\n          return (\n            <a\n              href=\"#\"\n              className=\"list-group-item list-group-item-action\"\n              key={task.id}\n            >\n              <details>\n                <summary>\n                  Task:<span>{task.title} </span>\n                  <br />\n                  {displayThumbnail(task.pic)}\n                  <br />\n                  <br />\n                  {/* <span>{task.pic}</span> */}\n                  <img src={task.pic} alt=\"image\" />\n                  <br />\n                  <br />\n                  <form\n                    onSubmit={e => _upload(e, task)}\n                    action={API + `/${task.id}/images`}\n                    method=\"post\"\n                    encType=\"multipart/form-data\"\n                  >\n                    <label>\n                      <span>Upload image</span>\n                      <input onChange={_handleChangeUpload} name=\"file\" type=\"file\" />\n                    </label>\n                    <button> Save</button>\n                  </form>\n                </summary>\n                History: <History history={task.historyList} />\n              </details>\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n\n  function History(props) {\n    return (\n      <ol>\n        {props.history.map((record, idx) => {\n          return (\n            <li key={idx}>\n              <span>{record.date}</span>\n              <span>{record.action}</span>\n            </li>\n          );\n        })}\n      </ol>\n    );\n  }\n\n  //Display thumbnail pictures\n  function displayThumbnail(picUrl) {\n    console.log(picUrl);\n    return (\n      // <img src={`https://resized-pictures.s3-us-west-2.amazonaws.com/resized` + `resized-pictures-` + {srcKey} />\n\n      <img src=\"https://resized-pictures.s3-us-west-2.amazonaws.com/resized-pictures-1568418587416-12.jpg\" />\n    );\n  }\n}\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header.js';\nimport Main from './components/Main.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div class=\"container-fluid\">\n      <React.Fragment>\n        <Header />\n        <Main />\n      </React.Fragment>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}